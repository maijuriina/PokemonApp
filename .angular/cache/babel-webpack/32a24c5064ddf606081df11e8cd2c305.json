{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PokemonClient = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst constants_1 = require(\"../constants\");\n\nconst base_1 = require(\"../structures/base\");\n/**\n * ### Pokemon Client\n *\n * Client used to access the Pokemon Endpoints:\n *  - [Abilities](https://pokeapi.co/docs/v2#abilities)\n *  - [Characteristics](https://pokeapi.co/docs/v2#characteristics)\n *  - [Egg Groups](https://pokeapi.co/docs/v2#egg-groups)\n *  - [Genders](https://pokeapi.co/docs/v2#genders)\n *  - [Growth Rates](https://pokeapi.co/docs/v2#growth-rates)\n *  - [Natures](https://pokeapi.co/docs/v2#natures)\n *  - [Pokeathlon Stats](https://pokeapi.co/docs/v2#pokeathlon-stats)\n *  - [Pokemon](https://pokeapi.co/docs/v2#pokemon)\n *  - [Pokemon Location Areas](https://pokeapi.co/docs/v2#pokemon-location-areas)\n *  - [Pokemon Colors](https://pokeapi.co/docs/v2#pokemon-colors)\n *  - [Pokemon Forms](https://pokeapi.co/docs/v2#pokemon-forms)\n *  - [Pokemon Habitats](https://pokeapi.co/docs/v2#pokemon-habitats)\n *  - [Pokemon Shapes](https://pokeapi.co/docs/v2#pokemon-shapes)\n *  - [Pokemon Species](https://pokeapi.co/docs/v2#pokemon-species)\n *  - [Stats](https://pokeapi.co/docs/v2#stats)\n *  - [Types](https://pokeapi.co/docs/v2#types)\n * ---\n * See [PokÃ©API Documentation](https://pokeapi.co/docs/v2#pokemon-section)\n */\n\n\nclass PokemonClient extends base_1.BaseClient {\n  /**\n   * @argument clientOptions Options for the client.\n   */\n  constructor(clientOptions) {\n    super(clientOptions);\n  }\n  /**\n   * Get an Ability by it's name\n   * @param name The Ability name\n   * @returns An Ability\n   */\n\n\n  getAbilityByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Ability}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get an Ability by it's ID\n   * @param id The Ability ID\n   * @returns An Ability\n   */\n\n\n  getAbilityById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Ability}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Characteristic by it's ID\n   * @param id The Characteristic ID\n   * @returns A Characteristic\n   */\n\n\n  getCharacteristicById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Characteristic}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get an Egg Group by it's name\n   * @param name The Egg Group name\n   * @returns An Egg Group\n   */\n\n\n  getEggGroupByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EggGroup}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get an Egg Group by it's ID\n   * @param id The Egg Group ID\n   * @returns An Egg Group\n   */\n\n\n  getEggGroupById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EggGroup}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Gender by it's name\n   * @param name The gender name\n   * @returns An Egg Group\n   */\n\n\n  getGenderByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Gender}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Gender by it's ID\n   * @param id The Gender ID\n   * @returns A Gender\n   */\n\n\n  getGenderById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Gender}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Growth Rate by it's name\n   * @param name The Growth Rate name\n   * @returns A Growth Rate\n   */\n\n\n  getGrowthRateByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.GrowthRate}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Growth Rate by it's ID\n   * @param id The Growth Rate ID\n   * @returns A Growth Rate\n   */\n\n\n  getGrowthRateById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.GrowthRate}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Nature by it's name\n   * @param name The Nature name\n   * @returns A Nature\n   */\n\n\n  getNatureByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Nature}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Nature by it's ID\n   * @param id The Nature ID\n   * @returns A Nature\n   */\n\n\n  getNatureById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Nature}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokeathlon Stat by it's name\n   * @param name The Pokeathlon Stat name\n   * @returns A Pokeathlon Stat\n   */\n\n\n  getPokeathlonStatByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokeathlonStat}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokeathlon Stat by it's ID\n   * @param id The Pokeathlon Stat ID\n   * @returns A Pokeathlon Stat\n   */\n\n\n  getPokeathlonStatById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokeathlonStat}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon by it's name\n   * @param name The Pokemon name\n   * @returns A Pokemon Stat\n   */\n\n\n  getPokemonByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Pokemon}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon by it's ID\n   * @param id The Pokemon ID\n   * @returns A Pokemon\n   */\n\n\n  getPokemonById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Pokemon}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Location Area by it's ID\n   * @param id The Pokemon Location Area ID\n   * @returns A Pokemon Location Area\n   */\n\n\n  getPokemonLocationAreaById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonLocationArea.replace(':id', id.toString())}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Color by it's name\n   * @param name The Pokemon Color name\n   * @returns A Pokemon Color\n   */\n\n\n  getPokemonColorByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonColor}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Color by it's ID\n   * @param id The Pokemon Color ID\n   * @returns A Pokemon Color\n   */\n\n\n  getPokemonColorById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonColor}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Form by it's name\n   * @param name The Pokemon Form name\n   * @returns A Pokemon Form\n   */\n\n\n  getPokemonFormByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonForm}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Form by it's ID\n   * @param id The Pokemon Form ID\n   * @returns A Pokemon Form\n   */\n\n\n  getPokemonFormById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonForm}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Habitat by it's name\n   * @param name The Pokemon Habitat name\n   * @returns A Pokemon Habitat\n   */\n\n\n  getPokemonHabitatByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonHabitat}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Habitat by it's ID\n   * @param id The Pokemon Habitat Form ID\n   * @returns A Pokemon Habitat\n   */\n\n\n  getPokemonHabitatById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonHabitat}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Shape by it's name\n   * @param name The Pokemon Shape name\n   * @returns A Pokemon Shape\n   */\n\n\n  getPokemonShapeByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonShape}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Shape by it's ID\n   * @param id The Pokemon Shape Form ID\n   * @returns A Pokemon Shape\n   */\n\n\n  getPokemonShapeById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonShape}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Species by it's name\n   * @param name The Pokemon Species name\n   * @returns A Pokemon Species\n   */\n\n\n  getPokemonSpeciesByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonSpecies}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pokemon Species by it's ID\n   * @param id The Pokemon Species Form ID\n   * @returns A Pokemon Species\n   */\n\n\n  getPokemonSpeciesById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonSpecies}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Stat by it's name\n   * @param name The Stat name\n   * @returns A Stat\n   */\n\n\n  getStatByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Stat}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Stat by it's ID\n   * @param id The Stat ID\n   * @returns A Stat\n   */\n\n\n  getStatById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Stat}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Type by it's name\n   * @param name The Type name\n   * @returns A Type\n   */\n\n\n  getTypeByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Type}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Type by it's ID\n   * @param id The Type ID\n   * @returns A Type\n   */\n\n\n  getTypeById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Type}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Abilities\n   * @param offset The first item that you will get\n   * @param limit How many Abilities per page\n   * @returns A list of Abilities\n   */\n\n\n  listAbilities(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Ability}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Characteristics\n   * @param offset The first item that you will get\n   * @param limit How many Characteristics per page\n   * @returns A list of Characteristics\n   */\n\n\n  listCharacteristics(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Characteristic}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Egg Groups\n   * @param offset The first item that you will get\n   * @param limit How many Egg Groups per page\n   * @returns A list of Egg Groups\n   */\n\n\n  listEggGroups(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EggGroup}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Genders\n   * @param offset The first item that you will get\n   * @param limit How many Genders per page\n   * @returns A list of Genders\n   */\n\n\n  listGenders(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Gender}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Growth Rates\n   * @param offset The first item that you will get\n   * @param limit How many Growth Rates per page\n   * @returns A list of Growth Rates\n   */\n\n\n  listGrowthRates(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.GrowthRate}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Natures\n   * @param offset The first item that you will get\n   * @param limit How many Growth Natures per page\n   * @returns A list of Natures\n   */\n\n\n  listNatures(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Nature}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Pokeathlon Stats\n   * @param offset The first item that you will get\n   * @param limit How many Pokeathlon Stats per page\n   * @returns A list of Pokeathlon Stats\n   */\n\n\n  listPokeathlonStats(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokeathlonStat}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Pokemons\n   * @param offset The first item that you will get\n   * @param limit How many Pokemons Stats per page\n   * @returns A list of Pokemons\n   */\n\n\n  listPokemons(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Pokemon}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Pokemon Colors\n   * @param offset The first item that you will get\n   * @param limit How many Pokemon Colors per page\n   * @returns A list of Pokemon Colors\n   */\n\n\n  listPokemonColors(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonColor}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Pokemon Forms\n   * @param offset The first item that you will get\n   * @param limit How many Pokemon Forms per page\n   * @returns A list of Pokemon Forms\n   */\n\n\n  listPokemonForms(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonForm}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Pokemon Habitats\n   * @param offset The first item that you will get\n   * @param limit How many Pokemon Habitats per page\n   * @returns A list of Pokemon Habitats\n   */\n\n\n  listPokemonHabitats(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonHabitat}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Pokemon Shapes\n   * @param offset The first item that you will get\n   * @param limit How many Pokemon Shapes per page\n   * @returns A list of Pokemon Shapes\n   */\n\n\n  listPokemonShapes(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonShape}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Pokemon Species\n   * @param offset The first item that you will get\n   * @param limit How many Pokemon Species per page\n   * @returns A list of Pokemon Species\n   */\n\n\n  listPokemonSpecies(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PokemonSpecies}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Stats\n   * @param offset The first item that you will get\n   * @param limit How many Stats per page\n   * @returns A list of Stats\n   */\n\n\n  listStats(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Stat}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Types\n   * @param offset The first item that you will get\n   * @param limit How many Types per page\n   * @returns A list of Types\n   */\n\n\n  listTypes(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Type}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n\n}\n\nexports.PokemonClient = PokemonClient;","map":null,"metadata":{},"sourceType":"script"}