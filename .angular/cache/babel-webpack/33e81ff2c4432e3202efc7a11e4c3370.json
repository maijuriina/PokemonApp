{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EncounterClient = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst constants_1 = require(\"../constants\");\n\nconst base_1 = require(\"../structures/base\");\n/**\n * ### Encounter Client\n *\n * Client used to access the Encounter Endpoints:\n *  - [Encounter Methods](https://pokeapi.co/docs/v2#encounter-methods)\n *  - [Encounter Conditions](https://pokeapi.co/docs/v2#encounter-conditions)\n *  - [Encounter Condition Values](https://pokeapi.co/docs/v2#encounter-condition-values)\n * ---\n * See [PokÃ©API Documentation](https://pokeapi.co/docs/v2#encounters-section)\n */\n\n\nclass EncounterClient extends base_1.BaseClient {\n  /**\n   * @argument clientOptions Options for the client.\n   */\n  constructor(clientOptions) {\n    super(clientOptions);\n  }\n  /**\n   * Get an Encounter Method by it's name\n   * @param name The Encounter Method name\n   * @returns An Encounter Method\n   */\n\n\n  getEncounterMethodByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EncouterMethod}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get an Encounter Method by it's ID\n   * @param id The Encounter Method ID\n   * @returns An Encounter Method\n   */\n\n\n  getEncounterMethodById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EncouterMethod}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get an Encounter Condition by it's ID\n   * @param id The Encounter Condition ID\n   * @returns An Encounter Condition\n   */\n\n\n  getEncounterConditionById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EncounterCondition}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get an Encounter Condition by it's name\n   * @param name The Encounter Condition name\n   * @returns An Encounter Condition\n   */\n\n\n  getEncounterConditionByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EncounterCondition}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get an Encounter Condition Value by it's name\n   * @param name The Encounter Condition Value name\n   * @returns An Encounter Condition Value\n   */\n\n\n  getEncounterConditionValueByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EncouterConditionValue}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get an Encounter Condition Value by it's ID\n   * @param id The Encounter Condition Value ID\n   * @returns An Encounter Condition Value\n   */\n\n\n  getEncounterConditionValueById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EncouterConditionValue}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Encounter Methods\n   * @param offset The first item that you will get\n   * @param limit How many Encounter Methods per page\n   * @returns A list of Encounter Methods\n   */\n\n\n  listEncounterMethods(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EncouterMethod}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Encounter Conditions\n   * @param offset The first item that you will get\n   * @param limit How many Encounter Conditions per page\n   * @returns A list of Encounter Methods\n   */\n\n\n  listEncounterConditions(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EncounterCondition}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Encounter Condition Values\n   * @param offset The first item that you will get\n   * @param limit How many Encounter Condition Values per page\n   * @returns A list of Encounter Condition Values\n   */\n\n\n  listEncounterConditionValues(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.EncouterConditionValue}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n\n}\n\nexports.EncounterClient = EncounterClient;","map":null,"metadata":{},"sourceType":"script"}