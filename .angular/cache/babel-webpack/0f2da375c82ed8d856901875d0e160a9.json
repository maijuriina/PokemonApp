{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Maijuriina/PokemonApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BerryClient } from 'pokenode-ts';\nimport { PokemonClient } from 'pokenode-ts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    const api = new BerryClient({\n      cacheOptions: {\n        maxAge: 5000,\n        exclude: {\n          query: false\n        }\n      }\n    }); // Enable cache with 5 seconds including requests with query parameters.\n    // First call will cache the response\n    // The next calls within 5 seconds will come from the cache\n  }\n\n  getPokemonList() {\n    /*#__PURE__*/\n    _asyncToGenerator(function* () {\n      const api = new PokemonClient();\n      yield api.listPokemons().then(console.log).catch(error => console.error(error));\n    });\n  }\n\n  getPokemonByName(searchTerm) {\n    _asyncToGenerator(function* () {\n      const api = new PokemonClient();\n      yield api.getPokemonByName(searchTerm).then(data => console.log(data.name)) // will output name in searchTerm\n      .catch(error => console.error(error));\n    })();\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root' // fixes NullInjectorError\n\n});","map":{"version":3,"sources":["C:/Users/Maijuriina/PokemonApp/src/app/service/pokemon.service.ts"],"names":["BerryClient","PokemonClient","i0","i1","ConfigService","constructor","http","api","cacheOptions","maxAge","exclude","query","getPokemonList","listPokemons","then","console","log","catch","error","getPokemonByName","searchTerm","data","name","ɵfac","ConfigService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,UAAMC,GAAG,GAAG,IAAIP,WAAJ,CAAgB;AAAEQ,MAAAA,YAAY,EAAE;AAAEC,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAAzB;AAAhB,KAAhB,CAAZ,CAFc,CAE8E;AAC5F;AACA;AACH;;AACDC,EAAAA,cAAc,GAAG;AACb;AAAA,sBAAC,aAAY;AACT,YAAML,GAAG,GAAG,IAAIN,aAAJ,EAAZ;AACA,YAAMM,GAAG,CACJM,YADC,GAEDC,IAFC,CAEKC,OAAO,CAACC,GAFb,EAGDC,KAHC,CAGMC,KAAD,IAAWH,OAAO,CAACG,KAAR,CAAcA,KAAd,CAHhB,CAAN;AAIH,KAND;AAOH;;AACDC,EAAAA,gBAAgB,CAACC,UAAD,EAAa;AACzB,sBAAC,aAAY;AACT,YAAMb,GAAG,GAAG,IAAIN,aAAJ,EAAZ;AACA,YAAMM,GAAG,CACJY,gBADC,CACgBC,UADhB,EAEDN,IAFC,CAEKO,IAAD,IAAUN,OAAO,CAACC,GAAR,CAAYK,IAAI,CAACC,IAAjB,CAFd,EAEsC;AAFtC,OAGDL,KAHC,CAGMC,KAAD,IAAWH,OAAO,CAACG,KAAR,CAAcA,KAAd,CAHhB,CAAN;AAIH,KAND;AAOH;;AAxBsB;;AA0B3Bd,aAAa,CAACmB,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAIrB,aAAV,EAAyBF,EAAE,CAACwB,QAAH,CAAYvB,EAAE,CAACwB,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACAvB,aAAa,CAACwB,KAAd,GAAsB,aAAc1B,EAAE,CAAC2B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE1B,aAAT;AAAwB2B,EAAAA,OAAO,EAAE3B,aAAa,CAACmB,IAA/C;AAAqDS,EAAAA,UAAU,EAAE,MAAjE,CAAwE;;AAAxE,CAAtB,CAApC","sourcesContent":["import { BerryClient } from 'pokenode-ts';\r\nimport { PokemonClient } from 'pokenode-ts';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ConfigService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        const api = new BerryClient({ cacheOptions: { maxAge: 5000, exclude: { query: false } } }); // Enable cache with 5 seconds including requests with query parameters.\r\n        // First call will cache the response\r\n        // The next calls within 5 seconds will come from the cache\r\n    }\r\n    getPokemonList() {\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            await api\r\n                .listPokemons()\r\n                .then((console.log))\r\n                .catch((error) => console.error(error));\r\n        });\r\n    }\r\n    getPokemonByName(searchTerm) {\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            await api\r\n                .getPokemonByName(searchTerm)\r\n                .then((data) => console.log(data.name)) // will output name in searchTerm\r\n                .catch((error) => console.error(error));\r\n        })();\r\n    }\r\n}\r\nConfigService.ɵfac = function ConfigService_Factory(t) { return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient)); };\r\nConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigService, factory: ConfigService.ɵfac, providedIn: 'root' // fixes NullInjectorError\r\n });\r\n"]},"metadata":{},"sourceType":"module"}