{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Maijuriina/PokemonApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BerryClient } from 'pokenode-ts';\nimport { PokemonClient } from 'pokenode-ts';\nimport { Pokemon } from '../item/pokemon';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.pokeSource = 'https://pokeapi.co/api/v2/pokemon/?limit=151';\n    const api = new BerryClient({\n      cacheOptions: {\n        maxAge: 5000,\n        exclude: {\n          query: false\n        }\n      }\n    }); // Enable cache with 5 seconds including requests with query parameters.\n    // First call will cache the response\n    // The next calls within 5 seconds will come from the cache\n  }\n  /*getPokemonList(): any {\r\n      (async () => {\r\n          const api = new PokemonClient();\r\n          var amountOfPokemons = 898; // amount of pokemon without counting variations\r\n          var amountWanted = 20;\r\n          var griddedPokemons: Pokemon[] = [];\r\n            await api\r\n          .listPokemons(0, amountOfPokemons)\r\n          .then((data) => {\r\n              var indexArray = new Array();\r\n              for (var i = 1; i <= amountWanted; i++) {\r\n                  var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\r\n                  if (indexArray.includes(randomPokemonIndex)) { // if index is already in array, it is not added and random is made again\r\n                      console.log(randomPokemonIndex)\r\n                      i--;\r\n                      continue;\r\n                  } else { // if index is not in array, it is used to push data result to griddedPokemons\r\n                      indexArray.push(randomPokemonIndex);\r\n                      //var data.results[randomPokemonIndex] = new Pokemon();\r\n                      const pokemon = Object.assign(new Pokemon, data.results[randomPokemonIndex]);\r\n                      console.log(pokemon);\r\n                      griddedPokemons.push(pokemon);\r\n                      //griddedPokemons.push(data.results[randomPokemonIndex]);\r\n                  }\r\n              }\r\n          })\r\n          .catch((error) => console.error(error));\r\n          //console.log(JSON.stringify(griddedPokemons));\r\n          console.log(griddedPokemons)\r\n          return griddedPokemons;\r\n          })();\r\n  }*/\n\n\n  getData() {\n    fetch(this.pokeSource).then(response => response.json()).then(griddedPokemons => console.log(griddedPokemons + ' = from fetch'));\n  }\n\n  getPokemonList() {\n    _asyncToGenerator(function* () {\n      const api = new PokemonClient();\n      var amountOfPokemons = 898; // amount of pokemon without counting variations\n\n      var amountWanted = 20;\n      var griddedPokemons = [];\n      yield api.listPokemons(0, amountOfPokemons).then(data => {\n        var indexArray = new Array();\n\n        for (var i = 1; i <= amountWanted; i++) {\n          var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\n\n          if (indexArray.includes(randomPokemonIndex)) {\n            // if index is already in array, it is not added and random is made again\n            console.log(randomPokemonIndex);\n            i--;\n            continue;\n          } else {\n            // if index is not in array, it is used to push data result to griddedPokemons\n            indexArray.push(randomPokemonIndex);\n            const pokemon = Object.assign(new Pokemon(), data.results[randomPokemonIndex]);\n            console.log(pokemon);\n            griddedPokemons.push(pokemon); //griddedPokemons.push(data.results[randomPokemonIndex]);\n          }\n        }\n      }).catch(error => console.error(error)); //console.log(JSON.stringify(griddedPokemons));  \n\n      console.log(griddedPokemons);\n      return griddedPokemons;\n    })();\n  }\n\n  getPokemonByName(searchTerm) {\n    _asyncToGenerator(function* () {\n      const api = new PokemonClient();\n      yield api.getPokemonByName(searchTerm).then(data => console.log(data.name)) // will output name in searchTerm\n      .catch(error => console.error(error));\n    })();\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root' // fixes NullInjectorError\n\n});","map":{"version":3,"sources":["C:/Users/Maijuriina/PokemonApp/src/app/service/pokemon.service.ts"],"names":["BerryClient","PokemonClient","Pokemon","i0","i1","ConfigService","constructor","http","pokeSource","api","cacheOptions","maxAge","exclude","query","getData","fetch","then","response","json","griddedPokemons","console","log","getPokemonList","amountOfPokemons","amountWanted","listPokemons","data","indexArray","Array","i","randomPokemonIndex","Math","floor","random","includes","push","pokemon","Object","assign","results","catch","error","getPokemonByName","searchTerm","name","ɵfac","ConfigService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BerryClient } from 'pokenode-ts';\r\nimport { PokemonClient } from 'pokenode-ts';\r\nimport { Pokemon } from '../item/pokemon';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ConfigService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.pokeSource = 'https://pokeapi.co/api/v2/pokemon/?limit=151';\r\n        const api = new BerryClient({ cacheOptions: { maxAge: 5000, exclude: { query: false } } }); // Enable cache with 5 seconds including requests with query parameters.\r\n        // First call will cache the response\r\n        // The next calls within 5 seconds will come from the cache\r\n    }\r\n    /*getPokemonList(): any {\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            var amountOfPokemons = 898; // amount of pokemon without counting variations\r\n            var amountWanted = 20;\r\n            var griddedPokemons: Pokemon[] = [];\r\n\r\n            await api\r\n            .listPokemons(0, amountOfPokemons)\r\n            .then((data) => {\r\n                var indexArray = new Array();\r\n                for (var i = 1; i <= amountWanted; i++) {\r\n                    var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\r\n                    if (indexArray.includes(randomPokemonIndex)) { // if index is already in array, it is not added and random is made again\r\n                        console.log(randomPokemonIndex)\r\n                        i--;\r\n                        continue;\r\n                    } else { // if index is not in array, it is used to push data result to griddedPokemons\r\n                        indexArray.push(randomPokemonIndex);\r\n                        //var data.results[randomPokemonIndex] = new Pokemon();\r\n                        const pokemon = Object.assign(new Pokemon, data.results[randomPokemonIndex]);\r\n                        console.log(pokemon);\r\n                        griddedPokemons.push(pokemon);\r\n                        //griddedPokemons.push(data.results[randomPokemonIndex]);\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => console.error(error));\r\n            //console.log(JSON.stringify(griddedPokemons));\r\n            console.log(griddedPokemons)\r\n            return griddedPokemons;\r\n  \r\n        })();\r\n    }*/\r\n    getData() {\r\n        fetch(this.pokeSource)\r\n            .then(response => response.json())\r\n            .then(griddedPokemons => console.log(griddedPokemons + ' = from fetch'));\r\n    }\r\n    getPokemonList() {\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            var amountOfPokemons = 898; // amount of pokemon without counting variations\r\n            var amountWanted = 20;\r\n            var griddedPokemons = [];\r\n            await api\r\n                .listPokemons(0, amountOfPokemons)\r\n                .then((data) => {\r\n                var indexArray = new Array();\r\n                for (var i = 1; i <= amountWanted; i++) {\r\n                    var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\r\n                    if (indexArray.includes(randomPokemonIndex)) { // if index is already in array, it is not added and random is made again\r\n                        console.log(randomPokemonIndex);\r\n                        i--;\r\n                        continue;\r\n                    }\r\n                    else { // if index is not in array, it is used to push data result to griddedPokemons\r\n                        indexArray.push(randomPokemonIndex);\r\n                        const pokemon = Object.assign(new Pokemon, data.results[randomPokemonIndex]);\r\n                        console.log(pokemon);\r\n                        griddedPokemons.push(pokemon);\r\n                        //griddedPokemons.push(data.results[randomPokemonIndex]);\r\n                    }\r\n                }\r\n            })\r\n                .catch((error) => console.error(error));\r\n            //console.log(JSON.stringify(griddedPokemons));  \r\n            console.log(griddedPokemons);\r\n            return griddedPokemons;\r\n        })();\r\n    }\r\n    getPokemonByName(searchTerm) {\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            await api\r\n                .getPokemonByName(searchTerm)\r\n                .then((data) => console.log(data.name)) // will output name in searchTerm\r\n                .catch((error) => console.error(error));\r\n        })();\r\n    }\r\n}\r\nConfigService.ɵfac = function ConfigService_Factory(t) { return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient)); };\r\nConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigService, factory: ConfigService.ɵfac, providedIn: 'root' // fixes NullInjectorError\r\n });\r\n"]},"metadata":{},"sourceType":"module"}