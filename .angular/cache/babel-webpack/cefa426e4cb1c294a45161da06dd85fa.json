{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UtilityClient = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst constants_1 = require(\"../constants\");\n\nconst base_1 = require(\"../structures/base\");\n/**\n * ### Utility Client\n *\n * Client used to access the Utility Endpoints:\n *  - [Languages](https://pokeapi.co/docs/v2#utility-section)\n *  - Resources\n * ---\n * See [PokÃ©API Documentation](https://pokeapi.co/docs/v2#utility-section)\n */\n\n\nclass UtilityClient extends base_1.BaseClient {\n  constructor(clientOptions) {\n    super(clientOptions);\n  }\n  /**\n   * Get a Language by it's ID\n   * @param id The Language ID\n   * @returns Language\n   */\n\n\n  getLanguageById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Language}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Language by it's name\n   * @param name The Language name\n   * @returns Language\n   */\n\n\n  getLanguageByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Language}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Resource by it's url\n   * @param url The Resource url\n   * @returns Resource\n   */\n\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n  getResourceByUrl(url) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(url, {\n          baseURL: ''\n        }).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n\n  /**\n   * List Languages\n   * @param offset The first item that you will get\n   * @param limit How many Languages per page\n   * @returns A list of Languages\n   */\n\n\n  listLanguages(offset, limit) {\n    return new Promise((resolve, reject) => {\n      this.api.get(`${constants_1.Endpoints.Language}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n    });\n  }\n\n}\n\nexports.UtilityClient = UtilityClient;","map":null,"metadata":{},"sourceType":"script"}