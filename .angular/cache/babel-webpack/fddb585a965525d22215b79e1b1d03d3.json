{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MoveClient = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst constants_1 = require(\"../constants\");\n\nconst base_1 = require(\"../structures/base\");\n/**\n * ### Move Client\n *\n * Client used to access the Move Endpoints:\n *  - [Moves](https://pokeapi.co/docs/v2#moves)\n *  - [Move Ailments](https://pokeapi.co/docs/v2#move-ailments)\n *  - [Move Battle Styles](https://pokeapi.co/docs/v2#move-battle-styles)\n *  - [Move Categories](https://pokeapi.co/docs/v2#move-categories)\n *  - [Move Damage Classes](https://pokeapi.co/docs/v2#move-damage-classes)\n *  - [Move Learn Methods](https://pokeapi.co/docs/v2#move-learn-methods)\n *  - [Move Move Targets](https://pokeapi.co/docs/v2#move-targets)\n * ---\n * See [PokÃ©API Documentation](https://pokeapi.co/docs/v2#moves-section)\n */\n\n\nclass MoveClient extends base_1.BaseClient {\n  /**\n   * @argument clientOptions Options for the client.\n   */\n  constructor(clientOptions) {\n    super(clientOptions);\n  }\n  /**\n   * Get a Move by it's name\n   * @param name The move name\n   * @returns A Move\n   */\n\n\n  getMoveByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Move}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move by it's ID\n   * @param id The Move ID\n   * @returns A Move\n   */\n\n\n  getMoveById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Move}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Ailment by it's name\n   * @param name The Move Ailment name\n   * @returns A Move Ailment\n   */\n\n\n  getMoveAilmentByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveAilment}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Ailment by it's ID\n   * @param id The Move Ailment ID\n   * @returns A Move Ailment\n   */\n\n\n  getMoveAilmentById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveAilment}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Battle Style by it's name\n   * @param name The Move Battle Style name\n   * @returns A Move Battle Style\n   */\n\n\n  getMoveBattleStyleByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveBattleStyle}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Battle Style by it's ID\n   * @param id The Move Battle Style ID\n   * @returns A Move Battle Style\n   */\n\n\n  getMoveBattleStyleById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveBattleStyle}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Battle Category by it's name\n   * @param name The Move Category name\n   * @returns A Move Category\n   */\n\n\n  getMoveCategoryByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveCategory}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Battle Category by it's ID\n   * @param id The Move Category ID\n   * @returns A Move Category\n   */\n\n\n  getMoveCategoryById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveCategory}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Damage Class by it's name\n   * @param name The Move Damage Class name\n   * @returns A Move Damage Class\n   */\n\n\n  getMoveDamageClassByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveDamageClass}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Damage Class by it's ID\n   * @param id The Move Damage Class ID\n   * @returns A Move Damage Class\n   */\n\n\n  getMoveDamageClassById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveDamageClass}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Learn Method by it's name\n   * @param name The Move Learn Method name\n   * @returns A Move Learn Method\n   */\n\n\n  getMoveLearnMethodByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveLearnMethod}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Learn Method by it's ID\n   * @param id The Move Learn Method ID\n   * @returns A Move Learn Method\n   */\n\n\n  getMoveLearnMethodById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveLearnMethod}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Target by it's name\n   * @param name The Move Target name\n   * @returns A Move Target\n   */\n\n\n  getMoveTargetByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveTarget}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Move Target by it's ID\n   * @param id The Move Target ID\n   * @returns A Move Target\n   */\n\n\n  getMoveTargetById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveTarget}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Moves\n   * @param offset The first item that you will get\n   * @param limit How many Moves per page\n   * @returns A list of Moves\n   */\n\n\n  listMoves(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Move}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Move Ailments\n   * @param offset The first item that you will get\n   * @param limit How many Move Ailments per page\n   * @returns A list of Move Ailments\n   */\n\n\n  listMoveAilments(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveAilment}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Move Battle Styles\n   * @param offset The first item that you will get\n   * @param limit How many Move Battle Styles per page\n   * @returns A list of Move Battle Styles\n   */\n\n\n  listMoveBattleStyles(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveBattleStyle}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Move Categories\n   * @param offset The first item that you will get\n   * @param limit How many Move Categories per page\n   * @returns A list of Move Categories\n   */\n\n\n  listMoveCategories(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveCategory}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Move Damage Classes\n   * @param offset The first item that you will get\n   * @param limit How many Move Damage Classes per page\n   * @returns A list of Move Damage Classes\n   */\n\n\n  listMoveDamageClasses(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveDamageClass}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Move Learn Methods\n   * @param offset The first item that you will get\n   * @param limit How many Move Learn Methods per page\n   * @returns A list of Move Learn Methods\n   */\n\n\n  listMoveLearnMethods(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveLearnMethod}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Move Targets\n   * @param offset The first item that you will get\n   * @param limit How many Move Targets per page\n   * @returns A list of Move Targets\n   */\n\n\n  listMoveTargets(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.MoveTarget}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n\n}\n\nexports.MoveClient = MoveClient;","map":null,"metadata":{},"sourceType":"script"}