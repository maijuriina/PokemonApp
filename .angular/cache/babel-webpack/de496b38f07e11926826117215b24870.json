{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContestClient = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst constants_1 = require(\"../constants\");\n\nconst base_1 = require(\"../structures/base\");\n/**\n * ### Contest Client\n *\n * Client used to access the Contest Endpoints:\n *  - [Contest Types](https://pokeapi.co/docs/v2#contest-types)\n *  - [Contest Effects](https://pokeapi.co/docs/v2#contest-effects)\n *  - [Super Contest Effects](https://pokeapi.co/docs/v2#super-contest-effects)\n * ---\n * See [PokÃ©API Documentation](https://pokeapi.co/docs/v2#contests-section)\n */\n\n\nclass ContestClient extends base_1.BaseClient {\n  /**\n   * @argument clientOptions Options for the client.\n   */\n  constructor(clientOptions) {\n    super(clientOptions);\n  }\n  /**\n   * Get a Contest Type by it's name\n   * @param name  The contest type name\n   * @returns A Contest Type\n   */\n\n\n  getContestTypeByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.ContestType}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Contest Type by it's ID\n   * @param id The Contest Type ID\n   * @returns A Contest Type\n   */\n\n\n  getContestTypeById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.ContestType}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Contest Effect by it's ID\n   * @param id The Contest Effect ID\n   * @returns Contest Effect\n   */\n\n\n  getContestEffectById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.ContestEffect}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Super Contest Effect by it's ID\n   * @param id The Super Contest Effect ID\n   * @returns Super Contest Effect\n   */\n\n\n  getSuperContestEffectById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.SuperContestEffect}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Contest Types\n   * @param offset The first item that you will get\n   * @param limit How many contest types per page\n   * @returns A list of contest types\n   */\n\n\n  listContestTypes(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.ContestType}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Contest Effects\n   * @param offset The first item that you will get\n   * @param limit How many contest effects per page\n   * @returns A list of contest effects\n   */\n\n\n  listContestEffects(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.ContestEffect}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Super Contest Effects\n   * @param offset The first item that you will get\n   * @param limit How many Super Contest Effect per page\n   * @returns A list of Super Contest Effect\n   */\n\n\n  listSuperContestEffects(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.SuperContestEffect}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n\n}\n\nexports.ContestClient = ContestClient;","map":null,"metadata":{},"sourceType":"script"}