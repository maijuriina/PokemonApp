{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Maijuriina/PokemonApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BerryClient } from 'pokenode-ts';\nimport { PokemonClient } from 'pokenode-ts';\nimport { Pokemon } from '../item/pokemon';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ConfigService = /*#__PURE__*/(() => {\n  class ConfigService {\n    constructor(http) {\n      this.http = http;\n      this.pokeSource = 'https://pokeapi.co/api/v2/pokemon/?limit=151';\n      const api = new BerryClient({\n        cacheOptions: {\n          maxAge: 5000,\n          exclude: {\n            query: false\n          }\n        }\n      }); // Enable cache with 5 seconds including requests with query parameters.\n      // First call will cache the response\n      // The next calls within 5 seconds will come from the cache\n    }\n    /*getPokemonList(): any {\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            var amountOfPokemons = 898; // amount of pokemon without counting variations\r\n            var amountWanted = 20;\r\n            var griddedPokemons: Pokemon[] = [];\r\n              await api\r\n            .listPokemons(0, amountOfPokemons)\r\n            .then((data) => {\r\n                var indexArray = new Array();\r\n                for (var i = 1; i <= amountWanted; i++) {\r\n                    var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\r\n                    if (indexArray.includes(randomPokemonIndex)) { // if index is already in array, it is not added and random is made again\r\n                        console.log(randomPokemonIndex)\r\n                        i--;\r\n                        continue;\r\n                    } else { // if index is not in array, it is used to push data result to griddedPokemons\r\n                        indexArray.push(randomPokemonIndex);\r\n                        //var data.results[randomPokemonIndex] = new Pokemon();\r\n                        const pokemon = Object.assign(new Pokemon, data.results[randomPokemonIndex]);\r\n                        console.log(pokemon);\r\n                        griddedPokemons.push(pokemon);\r\n                        //griddedPokemons.push(data.results[randomPokemonIndex]);\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => console.error(error));\r\n            //console.log(JSON.stringify(griddedPokemons));\r\n            console.log(griddedPokemons)\r\n            return griddedPokemons;\r\n            })();\r\n    }*/\n\n    /*\r\n    getData() {\r\n        fetch(this.pokeSource)\r\n        .then(response => response.json())\r\n        .then(allpokemon =>\r\n            console.log(allpokemon + ' = from fetch'))\r\n        }\r\n    */\n\n\n    getPokemonList() {\n      _asyncToGenerator(function* () {\n        const api = new PokemonClient();\n        var amountOfPokemons = 898; // amount of pokemon without counting variations\n\n        var amountWanted = 20;\n        var griddedPokemons = [];\n        yield api.listPokemons(0, amountOfPokemons).then(data => {\n          var indexArray = new Array();\n\n          for (var i = 1; i <= amountWanted; i++) {\n            var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\n\n            if (indexArray.includes(randomPokemonIndex)) {\n              // if index is already in array, it is not added and random is made again\n              console.log(randomPokemonIndex);\n              i--;\n              continue;\n            } else {\n              // if index is not in array, it is used to push data result to griddedPokemons\n              indexArray.push(randomPokemonIndex);\n              const pokemon = Object.assign(new Pokemon(), data.results[randomPokemonIndex]);\n              console.log(pokemon);\n              griddedPokemons.push(pokemon); //griddedPokemons.push(data.results[randomPokemonIndex]);\n            }\n          }\n        }).catch(error => console.error(error)); //console.log(JSON.stringify(griddedPokemons));  \n\n        console.log(griddedPokemons);\n        return griddedPokemons;\n      })();\n    }\n\n    getPokemonByName(searchTerm) {\n      _asyncToGenerator(function* () {\n        const api = new PokemonClient();\n        yield api.getPokemonByName(searchTerm).then(data => console.log(data.name)) // will output name in searchTerm\n        .catch(error => console.error(error));\n      })();\n    }\n\n  }\n\n  ConfigService.ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac,\n    providedIn: 'root' // fixes NullInjectorError\n\n  });\n  return ConfigService;\n})();","map":null,"metadata":{},"sourceType":"module"}