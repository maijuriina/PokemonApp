{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LocationClient = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst constants_1 = require(\"../constants\");\n\nconst base_1 = require(\"../structures/base\");\n/**\n * ### Location Client\n *\n * Client used to access the Location Endpoints:\n *  - [Locations](https://pokeapi.co/docs/v2#locations)\n *  - [Location Areas](https://pokeapi.co/docs/v2#location-areas)\n *  - [Pal Park Areas](https://pokeapi.co/docs/v2#pal-park-areas)\n *  - [Regions](https://pokeapi.co/docs/v2#regions)\n * ---\n * See [PokÃ©API Documentation](https://pokeapi.co/docs/v2#locations-section)\n */\n\n\nclass LocationClient extends base_1.BaseClient {\n  /**\n   * @argument clientOptions Options for the client.\n   */\n  constructor(clientOptions) {\n    super(clientOptions);\n  }\n  /**\n   * Get a Location by it's name\n   * @param name The Location name\n   * @returns A Location\n   */\n\n\n  getLocationByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Location}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Location by it's ID\n   * @param id The Location ID\n   * @returns A location\n   */\n\n\n  getLocationById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Location}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Location Area by it's name\n   * @param name The Location Area name\n   * @returns A Location Area\n   */\n\n\n  getLocationAreaByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.LocationArea}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Location Area by it's ID\n   * @param id The Location Area ID\n   * @returns A Location Area\n   */\n\n\n  getLocationAreaById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.LocationArea}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pal Park Area by it's name\n   * @param name The Pal Park Area name\n   * @returns A Pal Park Area\n   */\n\n\n  getPalParkAreaByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PalParkArea}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Pal Park Area by it's ID\n   * @param id The Pal Park Area ID\n   * @returns A Pal Park Area\n   */\n\n\n  getPalParkAreaById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PalParkArea}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Region by it's name\n   * @param name The Region name\n   * @returns A Region\n   */\n\n\n  getRegionByName(name) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Region}/${name}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * Get a Region by it's ID\n   * @param id The Region ID\n   * @returns A Region\n   */\n\n\n  getRegionById(id) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Region}/${id}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Locations\n   * @param offset The first item that you will get\n   * @param limit How many Locations per page\n   * @returns A list of Locations\n   */\n\n\n  listLocations(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Location}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Location Areas\n   * @param offset The first item that you will get\n   * @param limit How many Locations per page\n   * @returns A list of Location Areas\n   */\n\n\n  listLocationAreas(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.LocationArea}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Pal Park Areas\n   * @param offset The first item that you will get\n   * @param limit How many Pal Park Areas per page\n   * @returns A list of Pal Park Areas\n   */\n\n\n  listPalParkAreas(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.PalParkArea}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n  /**\n   * List Regions\n   * @param offset The first item that you will get\n   * @param limit How many Regions per page\n   * @returns A list of Regions\n   */\n\n\n  listRegions(offset, limit) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.api.get(`${constants_1.Endpoints.Region}?offset=${offset || 0}&limit=${limit || 20}`).then(response => resolve(response.data)).catch(error => reject(error));\n      });\n    });\n  }\n\n}\n\nexports.LocationClient = LocationClient;","map":null,"metadata":{},"sourceType":"script"}