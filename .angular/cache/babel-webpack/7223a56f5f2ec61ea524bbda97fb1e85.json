{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Maijuriina/PokemonApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BerryClient } from 'pokenode-ts';\nimport { PokemonClient } from 'pokenode-ts';\nimport { Pokemon } from '../item/pokemon';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    const api = new BerryClient({\n      cacheOptions: {\n        maxAge: 5000,\n        exclude: {\n          query: false\n        }\n      }\n    }); // Enable cache with 5 seconds including requests with query parameters.\n    // First call will cache the response\n    // The next calls within 5 seconds will come from the cache\n  }\n\n  getPokemonList() {\n    var _this = this;\n\n    var griddedPokemons = [];\n\n    _asyncToGenerator(function* () {\n      const api = new PokemonClient();\n      var amountOfPokemons = 898; // amount of pokemon without counting variations\n\n      var amountWanted = 20;\n      yield api.listPokemons(0, amountOfPokemons).then(data => {\n        var indexArray = new Array();\n\n        for (var i = 1; i <= amountWanted; i++) {\n          var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\n\n          if (indexArray.includes(randomPokemonIndex)) {\n            // if index is already in array, it is not added and random is made again\n            console.log(randomPokemonIndex);\n            i--;\n            continue;\n          } else {\n            // if index is not in array, it is used to push data result to griddedPokemons\n            indexArray.push(randomPokemonIndex);\n            const pokemon = Object.assign(new Pokemon(), data.results[randomPokemonIndex]); // make data into a Pokemon\n\n            griddedPokemons.push(pokemon); // push into Pokemon-list to be returned at the end of the api call\n          }\n        } //return of(griddedPokemons);\n\n      }).then(data => {\n        griddedPokemons.forEach(pokemon => {\n          var hp = _this.getHP(pokemon.name);\n\n          console.log(hp); //console.log(this.getHP(pokemon.name as string))\n\n          pokemon.hp = _this.getHP(pokemon.name);\n          console.log(pokemon.hp);\n        });\n        console.log(griddedPokemons[1].hp + \" <- inside getPokemonList\");\n      }).catch(error => console.error(error));\n    })();\n\n    console.log(griddedPokemons);\n    return of(griddedPokemons);\n  }\n\n  getPokemonByName(searchTerm) {\n    var pokemon = {};\n\n    _asyncToGenerator(function* () {\n      const api = new PokemonClient();\n      yield api.getPokemonByName(searchTerm).then(data => {\n        const pokemonObject = Object.assign(new Pokemon(), data);\n        pokemon = pokemonObject; //console.log(data) // will output name in searchTerm\n      }).catch(error => console.error(error));\n    })();\n\n    console.log(pokemon);\n    return of(pokemon);\n  }\n  /*getMoreData(url: string) {\r\n      return this.http.get(url)\r\n  }*/\n\n\n  getHP(name) {\n    let hp;\n\n    _asyncToGenerator(function* () {\n      const api = new PokemonClient();\n      yield api.getPokemonByName(name).then(data => {\n        hp = data.stats[0].base_stat; // fetch HP of pokemon\n\n        console.log(hp + \" <-- hp inside then\");\n        return hp;\n      }).catch(error => console.error(error));\n    })(); //console.log(hp);\n    //return hp;\n\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root' // fixes NullInjectorError\n\n});","map":{"version":3,"sources":["C:/Users/Maijuriina/PokemonApp/src/app/service/pokemon.service.ts"],"names":["BerryClient","PokemonClient","Pokemon","of","i0","i1","ConfigService","constructor","http","api","cacheOptions","maxAge","exclude","query","getPokemonList","griddedPokemons","amountOfPokemons","amountWanted","listPokemons","then","data","indexArray","Array","i","randomPokemonIndex","Math","floor","random","includes","console","log","push","pokemon","Object","assign","results","forEach","hp","getHP","name","catch","error","getPokemonByName","searchTerm","pokemonObject","stats","base_stat","ɵfac","ConfigService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,UAAMC,GAAG,GAAG,IAAIT,WAAJ,CAAgB;AAAEU,MAAAA,YAAY,EAAE;AAAEC,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAAzB;AAAhB,KAAhB,CAAZ,CAFc,CAE8E;AAC5F;AACA;AACH;;AACDC,EAAAA,cAAc,GAAG;AAAA;;AACb,QAAIC,eAAe,GAAG,EAAtB;;AACA,sBAAC,aAAY;AACT,YAAMN,GAAG,GAAG,IAAIR,aAAJ,EAAZ;AACA,UAAIe,gBAAgB,GAAG,GAAvB,CAFS,CAEmB;;AAC5B,UAAIC,YAAY,GAAG,EAAnB;AACA,YAAMR,GAAG,CACJS,YADC,CACY,CADZ,EACeF,gBADf,EAEDG,IAFC,CAEKC,IAAD,IAAU;AAChB,YAAIC,UAAU,GAAG,IAAIC,KAAJ,EAAjB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,YAArB,EAAmCM,CAAC,EAApC,EAAwC;AACpC,cAAIC,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBX,gBAA3B,CAAzB;;AACA,cAAIK,UAAU,CAACO,QAAX,CAAoBJ,kBAApB,CAAJ,EAA6C;AAAE;AAC3CK,YAAAA,OAAO,CAACC,GAAR,CAAYN,kBAAZ;AACAD,YAAAA,CAAC;AACD;AACH,WAJD,MAKK;AAAE;AACHF,YAAAA,UAAU,CAACU,IAAX,CAAgBP,kBAAhB;AACA,kBAAMQ,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAIhC,OAAJ,EAAd,EAA2BkB,IAAI,CAACe,OAAL,CAAaX,kBAAb,CAA3B,CAAhB,CAFC,CAE6E;;AAC9ET,YAAAA,eAAe,CAACgB,IAAhB,CAAqBC,OAArB,EAHC,CAG8B;AAClC;AACJ,SAde,CAehB;;AACH,OAlBK,EAmBDb,IAnBC,CAmBKC,IAAD,IAAU;AAChBL,QAAAA,eAAe,CAACqB,OAAhB,CAAwBJ,OAAO,IAAI;AAC/B,cAAIK,EAAE,GAAG,KAAI,CAACC,KAAL,CAAWN,OAAO,CAACO,IAAnB,CAAT;;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAYO,EAAZ,EAF+B,CAG/B;;AACAL,UAAAA,OAAO,CAACK,EAAR,GAAa,KAAI,CAACC,KAAL,CAAWN,OAAO,CAACO,IAAnB,CAAb;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAYE,OAAO,CAACK,EAApB;AACH,SAND;AAOAR,QAAAA,OAAO,CAACC,GAAR,CAAYf,eAAe,CAAC,CAAD,CAAf,CAAmBsB,EAAnB,GAAwB,2BAApC;AACH,OA5BK,EA6BDG,KA7BC,CA6BMC,KAAD,IAAWZ,OAAO,CAACY,KAAR,CAAcA,KAAd,CA7BhB,CAAN;AA8BH,KAlCD;;AAmCAZ,IAAAA,OAAO,CAACC,GAAR,CAAYf,eAAZ;AACA,WAAOZ,EAAE,CAACY,eAAD,CAAT;AACH;;AACD2B,EAAAA,gBAAgB,CAACC,UAAD,EAAa;AACzB,QAAIX,OAAO,GAAG,EAAd;;AACA,sBAAC,aAAY;AACT,YAAMvB,GAAG,GAAG,IAAIR,aAAJ,EAAZ;AACA,YAAMQ,GAAG,CACJiC,gBADC,CACgBC,UADhB,EAEDxB,IAFC,CAEKC,IAAD,IAAU;AAChB,cAAMwB,aAAa,GAAGX,MAAM,CAACC,MAAP,CAAc,IAAIhC,OAAJ,EAAd,EAA2BkB,IAA3B,CAAtB;AACAY,QAAAA,OAAO,GAAGY,aAAV,CAFgB,CAGhB;AACH,OANK,EAODJ,KAPC,CAOMC,KAAD,IAAWZ,OAAO,CAACY,KAAR,CAAcA,KAAd,CAPhB,CAAN;AAQH,KAVD;;AAWAZ,IAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AACA,WAAO7B,EAAE,CAAC6B,OAAD,CAAT;AACH;AACD;AACJ;AACA;;;AACIM,EAAAA,KAAK,CAACC,IAAD,EAAO;AACR,QAAIF,EAAJ;;AACA,sBAAC,aAAY;AACT,YAAM5B,GAAG,GAAG,IAAIR,aAAJ,EAAZ;AACA,YAAMQ,GAAG,CACJiC,gBADC,CACgBH,IADhB,EAEDpB,IAFC,CAEKC,IAAD,IAAU;AAChBiB,QAAAA,EAAE,GAAGjB,IAAI,CAACyB,KAAL,CAAW,CAAX,EAAcC,SAAnB,CADgB,CACc;;AAC9BjB,QAAAA,OAAO,CAACC,GAAR,CAAYO,EAAE,GAAG,qBAAjB;AACA,eAAOA,EAAP;AACH,OANK,EAODG,KAPC,CAOMC,KAAD,IAAWZ,OAAO,CAACY,KAAR,CAAcA,KAAd,CAPhB,CAAN;AAQH,KAVD,IAFQ,CAaR;AACA;;AACH;;AAjFsB;;AAmF3BnC,aAAa,CAACyC,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAI3C,aAAV,EAAyBF,EAAE,CAAC8C,QAAH,CAAY7C,EAAE,CAAC8C,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACA7C,aAAa,CAAC8C,KAAd,GAAsB,aAAchD,EAAE,CAACiD,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEhD,aAAT;AAAwBiD,EAAAA,OAAO,EAAEjD,aAAa,CAACyC,IAA/C;AAAqDS,EAAAA,UAAU,EAAE,MAAjE,CAAwE;;AAAxE,CAAtB,CAApC","sourcesContent":["import { BerryClient } from 'pokenode-ts';\r\nimport { PokemonClient } from 'pokenode-ts';\r\nimport { Pokemon } from '../item/pokemon';\r\nimport { of } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ConfigService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        const api = new BerryClient({ cacheOptions: { maxAge: 5000, exclude: { query: false } } }); // Enable cache with 5 seconds including requests with query parameters.\r\n        // First call will cache the response\r\n        // The next calls within 5 seconds will come from the cache\r\n    }\r\n    getPokemonList() {\r\n        var griddedPokemons = [];\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            var amountOfPokemons = 898; // amount of pokemon without counting variations\r\n            var amountWanted = 20;\r\n            await api\r\n                .listPokemons(0, amountOfPokemons)\r\n                .then((data) => {\r\n                var indexArray = new Array();\r\n                for (var i = 1; i <= amountWanted; i++) {\r\n                    var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\r\n                    if (indexArray.includes(randomPokemonIndex)) { // if index is already in array, it is not added and random is made again\r\n                        console.log(randomPokemonIndex);\r\n                        i--;\r\n                        continue;\r\n                    }\r\n                    else { // if index is not in array, it is used to push data result to griddedPokemons\r\n                        indexArray.push(randomPokemonIndex);\r\n                        const pokemon = Object.assign(new Pokemon, data.results[randomPokemonIndex]); // make data into a Pokemon\r\n                        griddedPokemons.push(pokemon); // push into Pokemon-list to be returned at the end of the api call\r\n                    }\r\n                }\r\n                //return of(griddedPokemons);\r\n            })\r\n                .then((data) => {\r\n                griddedPokemons.forEach(pokemon => {\r\n                    var hp = this.getHP(pokemon.name);\r\n                    console.log(hp);\r\n                    //console.log(this.getHP(pokemon.name as string))\r\n                    pokemon.hp = this.getHP(pokemon.name);\r\n                    console.log(pokemon.hp);\r\n                });\r\n                console.log(griddedPokemons[1].hp + \" <- inside getPokemonList\");\r\n            })\r\n                .catch((error) => console.error(error));\r\n        })();\r\n        console.log(griddedPokemons);\r\n        return of(griddedPokemons);\r\n    }\r\n    getPokemonByName(searchTerm) {\r\n        var pokemon = {};\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            await api\r\n                .getPokemonByName(searchTerm)\r\n                .then((data) => {\r\n                const pokemonObject = Object.assign(new Pokemon, data);\r\n                pokemon = pokemonObject;\r\n                //console.log(data) // will output name in searchTerm\r\n            })\r\n                .catch((error) => console.error(error));\r\n        })();\r\n        console.log(pokemon);\r\n        return of(pokemon);\r\n    }\r\n    /*getMoreData(url: string) {\r\n        return this.http.get(url)\r\n    }*/\r\n    getHP(name) {\r\n        let hp;\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            await api\r\n                .getPokemonByName(name)\r\n                .then((data) => {\r\n                hp = data.stats[0].base_stat; // fetch HP of pokemon\r\n                console.log(hp + \" <-- hp inside then\");\r\n                return hp;\r\n            })\r\n                .catch((error) => console.error(error));\r\n        })();\r\n        //console.log(hp);\r\n        //return hp;\r\n    }\r\n}\r\nConfigService.ɵfac = function ConfigService_Factory(t) { return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient)); };\r\nConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigService, factory: ConfigService.ɵfac, providedIn: 'root' // fixes NullInjectorError\r\n });\r\n"]},"metadata":{},"sourceType":"module"}