{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Maijuriina/PokemonApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BerryClient } from 'pokenode-ts';\nimport { PokemonClient } from 'pokenode-ts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    const api = new BerryClient({\n      cacheOptions: {\n        maxAge: 5000,\n        exclude: {\n          query: false\n        }\n      }\n    }); // Enable cache with 5 seconds including requests with query parameters.\n    // First call will cache the response\n    // The next calls within 5 seconds will come from the cache\n  }\n\n  getPokemonList() {\n    _asyncToGenerator(function* () {\n      const api = new PokemonClient();\n      var amountOfPokemons = 898; // amount of pokemon without counting variations\n\n      var amountWanted = 20;\n      var griddedPokemons = [];\n      yield api.listPokemons(0, amountOfPokemons).then(data => {\n        for (var i = 0; i <= amountWanted; i++) {\n          var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\n          var indexArray = new Array();\n\n          if (indexArray.includes(randomPokemonIndex)) {\n            console.log(\"same indexArray = \" + randomPokemonIndex);\n            i--;\n            return;\n          } else {\n            indexArray.push(randomPokemonIndex);\n            griddedPokemons.push(data.results[randomPokemonIndex]);\n          }\n        }\n      }) //.then((data) => console.log(data.results))\n      .catch(error => console.error(error));\n      console.log(JSON.stringify(griddedPokemons));\n    })();\n  }\n\n  getPokemonByName(searchTerm) {\n    _asyncToGenerator(function* () {\n      const api = new PokemonClient();\n      yield api.getPokemonByName(searchTerm).then(data => console.log(data.name)) // will output name in searchTerm\n      .catch(error => console.error(error));\n    })();\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root' // fixes NullInjectorError\n\n});","map":{"version":3,"sources":["C:/Users/Maijuriina/PokemonApp/src/app/service/pokemon.service.ts"],"names":["BerryClient","PokemonClient","i0","i1","ConfigService","constructor","http","api","cacheOptions","maxAge","exclude","query","getPokemonList","amountOfPokemons","amountWanted","griddedPokemons","listPokemons","then","data","i","randomPokemonIndex","Math","floor","random","indexArray","Array","includes","console","log","push","results","catch","error","JSON","stringify","getPokemonByName","searchTerm","name","ɵfac","ConfigService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,UAAMC,GAAG,GAAG,IAAIP,WAAJ,CAAgB;AAAEQ,MAAAA,YAAY,EAAE;AAAEC,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAAzB;AAAhB,KAAhB,CAAZ,CAFc,CAE8E;AAC5F;AACA;AACH;;AACDC,EAAAA,cAAc,GAAG;AACb,sBAAC,aAAY;AACT,YAAML,GAAG,GAAG,IAAIN,aAAJ,EAAZ;AACA,UAAIY,gBAAgB,GAAG,GAAvB,CAFS,CAEmB;;AAC5B,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,YAAMR,GAAG,CACJS,YADC,CACY,CADZ,EACeH,gBADf,EAEDI,IAFC,CAEKC,IAAD,IAAU;AAChB,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,YAArB,EAAmCK,CAAC,EAApC,EAAwC;AACpC,cAAIC,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,gBAA3B,CAAzB;AACA,cAAIW,UAAU,GAAG,IAAIC,KAAJ,EAAjB;;AACA,cAAID,UAAU,CAACE,QAAX,CAAoBN,kBAApB,CAAJ,EAA6C;AACzCO,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBR,kBAAnC;AACAD,YAAAA,CAAC;AACD;AACH,WAJD,MAKK;AACDK,YAAAA,UAAU,CAACK,IAAX,CAAgBT,kBAAhB;AACAL,YAAAA,eAAe,CAACc,IAAhB,CAAqBX,IAAI,CAACY,OAAL,CAAaV,kBAAb,CAArB;AACH;AACJ;AACJ,OAhBK,EAiBF;AAjBE,OAkBDW,KAlBC,CAkBMC,KAAD,IAAWL,OAAO,CAACK,KAAR,CAAcA,KAAd,CAlBhB,CAAN;AAmBAL,MAAAA,OAAO,CAACC,GAAR,CAAYK,IAAI,CAACC,SAAL,CAAenB,eAAf,CAAZ;AACH,KAzBD;AA0BH;;AACDoB,EAAAA,gBAAgB,CAACC,UAAD,EAAa;AACzB,sBAAC,aAAY;AACT,YAAM7B,GAAG,GAAG,IAAIN,aAAJ,EAAZ;AACA,YAAMM,GAAG,CACJ4B,gBADC,CACgBC,UADhB,EAEDnB,IAFC,CAEKC,IAAD,IAAUS,OAAO,CAACC,GAAR,CAAYV,IAAI,CAACmB,IAAjB,CAFd,EAEsC;AAFtC,OAGDN,KAHC,CAGMC,KAAD,IAAWL,OAAO,CAACK,KAAR,CAAcA,KAAd,CAHhB,CAAN;AAIH,KAND;AAOH;;AA3CsB;;AA6C3B5B,aAAa,CAACkC,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAIpC,aAAV,EAAyBF,EAAE,CAACuC,QAAH,CAAYtC,EAAE,CAACuC,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACAtC,aAAa,CAACuC,KAAd,GAAsB,aAAczC,EAAE,CAAC0C,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzC,aAAT;AAAwB0C,EAAAA,OAAO,EAAE1C,aAAa,CAACkC,IAA/C;AAAqDS,EAAAA,UAAU,EAAE,MAAjE,CAAwE;;AAAxE,CAAtB,CAApC","sourcesContent":["import { BerryClient } from 'pokenode-ts';\r\nimport { PokemonClient } from 'pokenode-ts';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ConfigService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        const api = new BerryClient({ cacheOptions: { maxAge: 5000, exclude: { query: false } } }); // Enable cache with 5 seconds including requests with query parameters.\r\n        // First call will cache the response\r\n        // The next calls within 5 seconds will come from the cache\r\n    }\r\n    getPokemonList() {\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            var amountOfPokemons = 898; // amount of pokemon without counting variations\r\n            var amountWanted = 20;\r\n            var griddedPokemons = [];\r\n            await api\r\n                .listPokemons(0, amountOfPokemons)\r\n                .then((data) => {\r\n                for (var i = 0; i <= amountWanted; i++) {\r\n                    var randomPokemonIndex = Math.floor(Math.random() * amountOfPokemons);\r\n                    var indexArray = new Array();\r\n                    if (indexArray.includes(randomPokemonIndex)) {\r\n                        console.log(\"same indexArray = \" + randomPokemonIndex);\r\n                        i--;\r\n                        return;\r\n                    }\r\n                    else {\r\n                        indexArray.push(randomPokemonIndex);\r\n                        griddedPokemons.push(data.results[randomPokemonIndex]);\r\n                    }\r\n                }\r\n            })\r\n                //.then((data) => console.log(data.results))\r\n                .catch((error) => console.error(error));\r\n            console.log(JSON.stringify(griddedPokemons));\r\n        })();\r\n    }\r\n    getPokemonByName(searchTerm) {\r\n        (async () => {\r\n            const api = new PokemonClient();\r\n            await api\r\n                .getPokemonByName(searchTerm)\r\n                .then((data) => console.log(data.name)) // will output name in searchTerm\r\n                .catch((error) => console.error(error));\r\n        })();\r\n    }\r\n}\r\nConfigService.ɵfac = function ConfigService_Factory(t) { return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient)); };\r\nConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigService, factory: ConfigService.ɵfac, providedIn: 'root' // fixes NullInjectorError\r\n });\r\n"]},"metadata":{},"sourceType":"module"}